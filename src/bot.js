require("dotenv").config()
const env = process.env
const {Telegraf, Telegram} = require("telegraf")
const alphabets = require("./alphabets.json")
const {
	arrayChunk,
	arrayFindAll,
	trimMessage,
	arrayRandom,
	arrayShuffle,
	getRandomInt,
} = require("./utils.js")
const {saveMessage, updateMessage, getLastMessage, saveInlineQuery} = require("./db.js")
const emojis = require("./emojis.json")

const bot = new Telegraf(env.BOT_TOKEN)

const commands = [
	{
		command: "q…Ø é–Ωd«ù ö«ùd«ùu",
		processor: str => {
			const alphabet = {
				–∞: "…ê",
				–±: "∆ç",
				–≤: " ö",
				–≥: "…π",
				–¥: "…ì",
				–µ: "«ù",
				—ë: "«ù",
				–∂: "–∂",
				–∑: "Œµ",
				–∏: "–∏",
				–π: "≈Ü",
				–∫: " û",
				–ª: "v",
				–º: "w",
				–Ω: "–Ω",
				–æ: "–æ",
				–ø: "u",
				—Ä: "d",
				—Å: "…î",
				—Ç: "…Ø",
				—É: " é",
				—Ñ: "—Ñ",
				—Ö: "—Ö",
				—Ü: "«π",
				—á: "“∫",
				—à: "m",
				—â: "m",
				—ä: "q",
				—ã: "qƒ±",
				—å: "q",
				—ç: "—î",
				—é: "ƒ±o",
				—è: " Å",
				a: "…ê",
				b: "q",
				c: "…î",
				d: "—Ä",
				e: "«ù",
				f: "…ü",
				g: "∆É",
				h: "…•",
				i: "ƒ±",
				j: "…æ",
				k: " û",
				l: "l",
				m: "…Ø",
				n: "u",
				o: "o",
				p: "d",
				q: "—å",
				r: "…π",
				s: "s",
				t: " á",
				u: "–ø",
				v: "–ª",
				w: "–º",
				x: "x",
				y: " é",
				z: "z",
				".": "Àô",
				"[": "]",
				"]": "[",
				"(": ")",
				")": "(",
				"{": "}",
				"}": "{",
				"?": "¬ø",
				"!": "¬°",
				"'": ",",
				",": "'",
				"<": ">",
				">": "<",
				_: "‚Äæ",
			}
			return str
				.toLowerCase()
				.split("")
				.map(letter => alphabet[letter] || letter)
				.reverse()
				.join("")
		},
	},
	{
		command: "–¢–æ–ö—Å–ò–∫",
		processor: function (str) {
			let reverse = false
			return str
				.split("")
				.map((letter, index) => {
					letter === " " && (reverse = !reverse)
					const isEven = index % 2 === 0
					return letter[
						["toLowerCase", "toUpperCase"][isEven ? (reverse ? 0 : 1) : reverse ? 1 : 0]
					]()
				})
				.join("")
		},
	},
	{
		command: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π üá∫üá¶",
		processor: str => {
			const uaLettersForRegExp = "[–ê-–Ø–∞-—è—ë–Å–á—ó–Ü—ñ–Ñ—î“ê“ë]"

			const getReplacement = letter => {
				const replaceMap = {
					—ä: () => "'",

					—ç: () => "—î",
					–≠: () => "–Ñ",

					–µ: () => arrayRandom(["—î", "–∏", "–µ"]),
					–ï: () => arrayRandom(["–Ñ", "–ò", "–ï"]),

					–∏: () => (Math.random() > 0.8 ? "i" : "–∏"),
					–ò: () => (Math.random() > 0.8 ? "I" : "–ò"),

					–æ: () => (Math.random() > 0.85 ? "i" : "–æ"),
					–û: () => (Math.random() > 0.85 ? "I" : "–û"),

					–π: () => "—ó",
					–ô: () => "–á",

					c: () => arrayRandom(["–∑", "—Å"]),
					C: () => arrayRandom(["–ó", "–°"]),

					—ã: () => arrayRandom(["–∏", "—ã"]),
					–´: () => arrayRandom(["–ò", "–´"]),

					–≥: () => arrayRandom(["“ë", "–≥"]),
					–ì: () => arrayRandom(["“ê", "–ì"]),
				}
				return replaceMap[letter] ? arrayRandom(replaceMap[letter]()) : letter
			}

			const replaceLetters = str => {
				const lettersToBeReplaced = [
					"—ä",
					"—ç",
					"–≠",
					"–µ",
					"–ï",
					"–∏",
					"–ò",
					"–æ",
					"–û",
					"–π",
					"–ô",
					"c",
					"C",
					"—ã",
					"–´",
					"–≥",
					"–ì",
				]
				const replaceChain = [
					{
						regExp: letter => new RegExp(`(${uaLettersForRegExp})(${letter})`, "gi"),
						callback: (...match) => `${match[1]}${getReplacement(match[2])}`,
					},
					{
						regExp: letter => new RegExp(`(${letter})(${uaLettersForRegExp})`, "gi"),
						callback: (...match) => `${getReplacement(match[1])}${match[2]}`,
					},
					{
						regExp: letter =>
							new RegExp(
								`(${uaLettersForRegExp})(${letter})(${uaLettersForRegExp})`,
								"gi"
							),
						callback: (...match) => `${match[1]}${getReplacement(match[2])}${match[3]}`,
					},
					{
						regExp: letter => new RegExp(` (${letter}) `, "gi"),
						callback: (...match) => ` ${getReplacement(match[1])} `,
					},
					{
						regExp: letter => new RegExp(`^(${letter})`, "gi"),
						callback: (...match) => getReplacement(match[1]),
					},
					{
						regExp: letter => new RegExp(`(${letter})$`, "gi"),
						callback: (...match) => getReplacement(match[1]),
					},
				]
				lettersToBeReplaced.forEach(letter => {
					replaceChain.forEach(({regExp, callback}) => {
						str = str.replace(regExp(letter), callback)
					})
				})
				return str
			}

			const replaceWords = str => {
				const words = {
					—Å: "–∑",
					–°: "–ó",

					–∏: "i",
					–ò: "I",

					—ç—Ç–æ: "—î",
					–≠—Ç–æ: "–Ñ",

					–µ–≥–æ: "–π–æ–≥–æ",
					–ï–≥–æ: "–ô–æ–≥–æ",

					–µ–µ: "—ó—ó",
					–ï–µ: "–á—ó",

					—á—Ç–æ: "—â–æ",
					–ß—Ç–æ: "–©–æ",

					–∫–∞–∫: "—è–∫",
					–ö–∞–∫: "–Ø–∫",

					–≥–¥–µ: "–¥–µ",
					–ì–¥–µ: "–î–µ",

					–ø–æ–¥: "–ø—ñ–¥",
					–ü–æ–¥: "–ü—ñ–¥",

					–∫–æ–≥–¥–∞: "–∫–æ–ª–∏",
					–ö–æ–≥–¥–∞: "–ö–æ–ª–∏",

					–∫–∞–∫–æ–π: "—è–∫–∏–π",
					–ö–∞–∫–æ–π: "–Ø–∫–∏–π",
				}
				let result = ""
				for (const word in words) {
					const replacement = words[word]
					const wordWithReplacedLetters = replaceLetters(word)
					result = str
						.replace(new RegExp(`^${wordWithReplacedLetters}`, "mg"), replacement)
						.replace(new RegExp(` ${wordWithReplacedLetters}`, "mg"), ` ${replacement}`)
						.replace(
							new RegExp(`^${wordWithReplacedLetters} `, "mg"),
							`${replacement} `
						)
						.replace(
							new RegExp(` ${wordWithReplacedLetters} `, "mg"),
							` ${replacement} `
						)
				}
				return result
			}

			return replaceWords(replaceLetters(str))
				.replace(new RegExp(`/(${uaLettersForRegExp})—Ç—Å—è/mu`), "$1—Ç—å—Å—è")
				.replace(/–∞—è /mu, "–∞ ", str)
		},
	},
	{
		command: "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è",
		processor: str => {
			const alphabet = {
				–∞: "a",
				–±: "b",
				–≤: "v",
				–≥: "g",
				–¥: "d",
				–µ: "e",
				—ë: "e",
				–∂: "zh",
				–∑: "z",
				–∏: "i",
				–π: "y",
				–∫: "k",
				–ª: "l",
				–º: "m",
				–Ω: "n",
				–æ: "o",
				–ø: "p",
				—Ä: "r",
				—Å: "s",
				—Ç: "t",
				—É: "u",
				—Ñ: "f",
				—Ö: "h",
				—Ü: "c",
				—á: "ch",
				—à: "sh",
				—â: "sch",
				—å: "'",
				—ã: "y",
				—ä: "'",
				—ç: "e",
				—é: "yu",
				—è: "ya",
				–ê: "A",
				–ë: "B",
				–í: "V",
				–ì: "G",
				–î: "D",
				–ï: "E",
				–Å: "E",
				–ñ: "Zh",
				–ó: "Z",
				–ò: "I",
				–ô: "Y",
				–ö: "K",
				–õ: "L",
				–ú: "M",
				–ù: "N",
				–û: "O",
				–ü: "P",
				–†: "R",
				–°: "S",
				–¢: "T",
				–£: "U",
				–§: "F",
				–•: "H",
				–¶: "C",
				–ß: "Ch",
				–®: "Sh",
				–©: "Sch",
				–¨: "'",
				–´: "Y",
				–™: "'",
				–≠: "E",
				–Æ: "Yu",
				–Ø: "Ya",
			}
			//auto detect language
			return str
				.split("")
				.map(letter => alphabet[letter] || letter)
				.join("")
		},
	},
	{
		command: "EmojiPastaü§©ü•∞‚ú®",
		processor: str => {
			if (str.length > 2048) {
				return "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10-2048 —Å–∏–º–≤–æ–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–∫–æ—Ä–æ—á–µ"
			} else if (str.length < 10) {
				return "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ —Å –±–æ–ª—å—à–∏–º–∏ –ø—Ä–µ–¥–æ–∂–µ–Ω–∏—è–º–∏."
			}

			const probability = p => {
				return p >= Math.random()
			}

			const splitIntoBlocks = str => {
				const symbols = "!\"#%&'()*+,-./:;<=>?@[]^_`{|}~ \n\\"
				const result = []
				if (str.length === 0) return result
				let isSymbol = false
				let word = ""
				str.split("").forEach(letter => {
					const containsSymbol = symbols.indexOf(letter) >= 0
					if (isSymbol) {
						if (containsSymbol) {
							word += letter
						} else {
							isSymbol = false
							if (word.length > 0) {
								result.push({
									substring: word,
									//"length": word.length,
									type: "symbol",
								})
							}
							word = letter
						}
					} else {
						if (!containsSymbol) {
							word += letter
						} else {
							isSymbol = true
							if (word.length > 0) {
								result.push({
									substring: word,
									lowercase: word.toLowerCase(),
									type: "word",
								})
							}
							word = letter
						}
					}
				})
				if (word.length > 0) {
					result.push(
						isSymbol
							? {
									substring: word,
									type: "symbol",
							  }
							: {
									substring: word,
									lowercase: word.toLowerCase(),
									type: "word",
							  }
					)
				}
				return result
			}

			const searchEmojis = word => {
				return emojis.filter(emoji => {
					if (word.length >= 3 && word.includes(emoji.keywords)) {
						return true
					} else if (
						emoji.keywords.filter(keyword => {
							return (
								(word.length >= 5 && keyword.indexOf(word) === 0) ||
								(keyword.length >= 5 && word.indexOf(keyword) === 0) ||
								(word.length >= 4 &&
									keyword.length >= 4 &&
									keyword.substr(0, 4) === word.substr(0, 4))
							)
						}).length > 0
					) {
						return true
					}
					return false
				})
			}

			const emojify = blocks => {
				let result = ""
				blocks.forEach(block => {
					if (block.type === "symbol") {
						result += block.substring
					} else {
						const foundEmojis = searchEmojis(block.lowercase)
						if (foundEmojis) {
							const foundEmojisAmount = foundEmojis.length
							result += block.substring
							result += arrayShuffle(foundEmojis)
								.slice(0, foundEmojisAmount >= 3 ? 3 : foundEmojisAmount)
								.map(({char}) => char)
								.join("")
						} else {
							result += block.substring
							if (block.substring.length >= 4 && probability(0.45)) {
								result += `${arrayRandom(emojis).char}${arrayRandom(emojis).char}`
							}
						}
					}
				})
				return result
			}

			const split = splitIntoBlocks(str)
			const emojified = emojify(split)
			return emojified
		},
	},
	{
		command: "–ù–µ–≤–∏–¥–∏–º—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –¥–ª—è Instagram",
		processor: str => {
			return str.replace(/\n\n+/gm, match => `\n${"‚†Ä\n".repeat(match.length - 1)}`)
		},
	},
].concat(
	alphabets.map(({alphabet, command}) => ({
		command,
		processor: str => {
			const transliterate–°ommand = commands.find(({command}) => command === "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è")
			const transliterated = transliterate–°ommand.processor(str)
			return transliterated
				.split("")
				.map(letter => alphabet[letter] || letter)
				.join("")
		},
	}))
)
const commandsList = commands.map(item => item.command)

const keyboards = {
	default: {
		one_time_keyboard: true,
		keyboard: arrayChunk(commandsList, 2),
	},
	remove: {remove_keyboard: true},
}

bot.start(async ctx => {
	console.log("start")
	await ctx.replyWithMarkdown(
		trimMessage(`
			üëã –ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —à—Ä–∏—Ñ—Ç –∏–ª–∏ –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É—é —Ç–≤–æ–π —Ç–µ–∫—Å—Ç.

			üí¨ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –£—á—Ç–∏, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.

			‚å®Ô∏è –ï—â–µ —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ, —Ç–∞–∫ —á—Ç–æ –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–º –¥–∏–∞–ª–æ–≥–µ –≤–≤–µ—Å—Ç–∏ @BiographerBot –∏ —Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç.

			–ö–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞: @FilteredInternet
			`),
		{
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º",
							switch_inline_query: "",
						},
					],
				],
			},
		}
	)
})

bot.on("inline_query", async ctx => {
	console.log("inline_query")
	const {query} = ctx.update.inline_query

	if (query.length > 0) {
		ctx.answerInlineQuery(
			commands.map(({processor, command}) => {
				const messageOut = processor(query)
				return {
					type: "article",
					id: `${command}_${getRandomInt(1, 99999999)}`,
					title: command,
					description: messageOut,
					input_message_content: {
						message_text: messageOut,
						disable_web_page_preview: true,
					},
				}
			})
		)
	} else {
		ctx.answerInlineQuery([], {
			switch_pm_text: "–í–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤",
			switch_pm_parameter: "start",
		})
	}
})

bot.on("chosen_inline_result", async ctx => {
	console.log("chosen_inline_result")
	const {result_id, query} = ctx.update.chosen_inline_result
	const usedCommand = result_id.split("_")[0]
	const {from} = ctx
	const {command, processor} = commands.find(({command}) => command === usedCommand)
	await saveInlineQuery({
		chat_id: from.id,
		username: from.username,
		first_name: from.first_name,
		language_code: from.language_code,
		message_in: query,
		message_out: processor(query),
		command,
	})
})

bot.on("message", async ctx => {
	console.log("message")
	const {text, caption, from, via_bot} = ctx.message
	const {id: chat_id} = from
	const messageIn = text || caption || ""

	if (via_bot?.id === ctx.botInfo.id) return
	await ctx.replyWithChatAction("typing")
	if (messageIn === "") {
		return ctx.reply("–í —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞¬†üòê")
	}
	if (commandsList.includes(messageIn)) {
		//–ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞, –¥–æ—Å—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		const lastMessage = await getLastMessage({chat_id})
		if (lastMessage) {
			//—Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å
			const command = commands.find(({command}) => command === messageIn) //–Ω–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥—ã
			const messageOut = command.processor(lastMessage.message_in) //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥—ã

			await ctx.reply(messageOut, {
				disable_web_page_preview: true,
				reply_markup: keyboards.remove,
			})
			//–∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é, –∑–∞–ø–æ–ª–Ω—è—è –µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
			await updateMessage({
				key: lastMessage.key,
				message_out: messageOut,
				command: messageIn,
			})
		} else {
			//—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–∞ –Ω–æ –ø—Ä–∏—Å–ª–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞
			return ctx.reply(
				"ü§î –•–º, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ. –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –£—á—Ç–∏, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.",
				{
					reply_markup: keyboards.remove,
				}
			)
		}
	} else {
		//–ø—Ä–∏—à–µ–ª —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
		const status = await saveMessage({
			chat_id,
			username: from.username || "",
			first_name: from.first_name || "",
			language_code: from.language_code || "",
			message_in: messageIn,
		})

		if (status) {
			await ctx.reply(
				"–û–∫, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º. –£—á—Ç–∏, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —à—Ä–∏—Ñ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ª–∞—Ç–∏–Ω–∏—Ü–µ–π.",
				{
					reply_markup: keyboards.default,
				}
			)
		} else {
			await ctx.reply(
				"ü§î –ö–∞–∂–µ—Ç—Å—è, —É –Ω–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –°–∫–æ—Ä–æ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @mikhailsdv.",
				{
					reply_markup: keyboards["default"],
				}
			)
		}
	}
})

module.exports = bot
